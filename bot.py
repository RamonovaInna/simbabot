import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import Command

from database import (
    init_db,
    add_user,
    get_user_id_by_name,
    save_task,
    mark_task_status,
    get_task_text,
    get_task_sender,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ---------- FSM ---------- #
class RequestStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_task_choice = State()
    waiting_for_custom_text = State()

# ---------- –ö–û–ú–ê–ù–î–´ ---------- #
@dp.message(Command("start"))
async def start(message: types.Message):
    await add_user(message.from_user.id, message.from_user.first_name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –≥–æ—Ç–æ–≤ –∫ –±—ã—Ç–æ–≤—ã–º –ø–æ–¥–≤–∏–≥–∞–º üí™")

@dp.message(Command("—Å–æ–∑–¥–∞—Ç—å_—Å–µ–º—å—é"))
async def create_family(message: types.Message):
    await message.answer("üîß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ —Å–µ–º—å–∏.")

@dp.message(Command("–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"))
async def join_family(message: types.Message):
    await message.answer("üîß –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–π –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏.")

@dp.message(Command("—Å–µ–º—å—è"))
async def show_family(message: types.Message):
    await message.answer("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π —Å–µ–º—å–∏.")

@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å_—á–ª–µ–Ω–∞"))
async def register_member(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–¥–æ–±–∞–≤–∏—Ç—å_—á–ª–µ–Ω–∞ [–ò–º—è]")
        return
    name = parts[1].strip()
    await add_user(message.from_user.id, name)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ {name} ‚úÖ")

@dp.message(Command("–º–µ–Ω—é"))
async def open_menu(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–∞—à–∞", callback_data="select_–ú–∞—à–∞")],
        [InlineKeyboardButton(text="–ò–Ω–Ω–∞", callback_data="select_–ò–Ω–Ω–∞")]
    ])
    await message.answer("–ö–æ–º—É –ø–æ—Ä—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=keyboard)
    await state.set_state(RequestStates.waiting_for_recipient)

@dp.callback_query(RequestStates.waiting_for_recipient)
async def select_recipient(callback: types.CallbackQuery, state: FSMContext):
    name = callback.data.replace("select_", "")
    await state.update_data(recipient=name)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöΩ –û–ø–µ—Ä–∞—Ü–∏—è \"–ö–∞–ª–æ–≤—ã–π –±–∞—Ä–∞–±–∞—à–∫–∞\"", callback_data="task_toilet")],
        [InlineKeyboardButton(text="üì¶ –ó–∞—Å–∞–¥–∞ —É –¥–≤–µ—Ä–∏ (–∑–∞–±–µ—Ä–∏ –∑–∞–∫–∞–∑)", callback_data="task_order")],
        [InlineKeyboardButton(text="üç¥ –í—Å—Ç—Ä–µ–≤–æ–∂—å –ø–ª–∏—Ç—É (–≤–∫–ª—é—á–∏ —É–∂–∏–Ω)", callback_data="task_dinner")],
        [InlineKeyboardButton(text="üóëÔ∏è –ú–∏—Å—Å–∏—è: –≤—ã–Ω–æ—Å —Ç–µ–ª–∞", callback_data="task_trash")],
        [InlineKeyboardButton(text="üíß –ê–∫–≤–∞-–¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –º–∏—Å–∫—É", callback_data="task_water")],
        [InlineKeyboardButton(text="üîã –ü–æ—Ä–∞–¥—É–π —Ä–æ–∑–µ—Ç–∫—É (–ø–æ—Å—Ç–∞–≤—å –Ω–∞ –∑–∞—Ä—è–¥–∫—É)", callback_data="task_charge")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="task_custom")]
    ])
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏ –ø–æ—Ä—É—á–µ–Ω–∏–µ –¥–ª—è {name}:", reply_markup=keyboard)
    await state.set_state(RequestStates.waiting_for_task_choice)

@dp.callback_query(RequestStates.waiting_for_task_choice)
async def handle_task_choice(callback: types.CallbackQuery, state: FSMContext):
    task_map = {
        "task_toilet": "–ü—Ä–∏–Ω–µ—Å—Ç–∏ —Ç—É–∞–ª–µ—Ç–Ω—É—é –±—É–º–∞–≥—É üßª",
        "task_order": "–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –æ—Ç –¥–≤–µ—Ä–∏ üç±",
        "task_dinner": "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —É–∂–∏–Ω –Ω–∞ –ø–ª–∏—Ç—É üç≥",
        "task_trash": "–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä üóëÔ∏è",
        "task_water": "–ù–∞–ª–∏—Ç—å –≤–æ–¥—É –≤ –º–∏—Å–∫—É üíß",
        "task_charge": "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥–∫—É üîã"
    }

    task_code = callback.data
    if task_code == "task_custom":
        await callback.message.edit_text("–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º ‚úçÔ∏è")
        await state.set_state(RequestStates.waiting_for_custom_text)
        return

    task_text = task_map.get(task_code, "")
    data = await state.get_data()
    to_name = data.get("recipient")
    to_id = await get_user_id_by_name(to_name)

    if not to_id:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        await state.clear()
        return

    task_id = await save_task(callback.from_user.id, to_id, task_text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{task_id}")]
    ])

    await bot.send_message(
        to_id,
        f"üì¨ <b>–ù–æ–≤–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –æ—Ç {callback.from_user.first_name}:</b>\n\n<i>{task_text}</i>",
        reply_markup=kb
    )
    await callback.message.edit_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üì®")
    await state.clear()

@dp.message(RequestStates.waiting_for_custom_text)
async def get_task_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    to_name = data.get("recipient")
    task_text = message.text
    to_id = await get_user_id_by_name(to_name)

    if not to_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        await state.clear()
        return

    task_id = await save_task(message.from_user.id, to_id, task_text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{task_id}")]
    ])

    await bot.send_message(
        to_id,
        f"üì¨ <b>–ù–æ–≤–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}:</b>\n\n<i>{task_text}</i>",
        reply_markup=kb
    )
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üì®")
    await state.clear()

# ---------- –ö–ù–û–ü–ö–ò –ó–ê–î–ê–ù–ò–Ø ---------- #
@dp.callback_query(F.data.startswith("done_"))
async def mark_done(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    await mark_task_status(task_id, "done")
    text = await get_task_text(task_id)
    sender = await get_task_sender(task_id)
    await callback.message.edit_text(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {text}")
    await bot.send_message(sender, f"üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ¬´{text}¬ª")

@dp.callback_query(F.data.startswith("decline_"))
async def mark_declined(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    await mark_task_status(task_id, "declined")
    text = await get_task_text(task_id)
    sender = await get_task_sender(task_id)
    await callback.message.edit_text(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {text}")
    await bot.send_message(sender, f"üòø –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: ¬´{text}¬ª")

# ---------- –ó–ê–ü–£–°–ö ---------- #
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
