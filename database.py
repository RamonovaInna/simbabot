import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import Command

from database import (
    init_db,
    add_user,
    get_user_id_by_name,
    save_task,
    mark_task_status,
    get_task_text,
    get_task_sender,
    create_family,
    assign_user_to_family,
    get_family_id_by_code,
    get_family_members,
    get_user_family_id
)

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ---------- FSM ---------- #
class RequestStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_task_choice = State()
    waiting_for_custom_text = State()

# ---------- –ö–û–ú–ê–ù–î–´ ---------- #
@dp.message(Command("start"))
async def start(message: types.Message):
    await add_user(message.from_user.id, message.from_user.first_name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –≥–æ—Ç–æ–≤ –∫ –±—ã—Ç–æ–≤—ã–º –ø–æ–¥–≤–∏–≥–∞–º üí™")

@dp.message(Command("—Å–æ–∑–¥–∞—Ç—å_—Å–µ–º—å—é"))
async def create_family_cmd(message: types.Message):
    user_name = message.from_user.first_name
    family_id, code = await create_family(f"–°–µ–º—å—è {user_name}")
    await assign_user_to_family(message.from_user.id, family_id)
    await message.answer(f"üéâ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞!
–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: <code>{code}</code>")

@dp.message(Command("–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"))
async def join_family_cmd(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ABC123")
        return
    code = parts[1].strip().upper()
    family_id = await get_family_id_by_code(code)
    if not family_id:
        await message.answer("‚ùå –°–µ–º—å—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await assign_user_to_family(message.from_user.id, family_id)
    await message.answer("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ!")

@dp.message(Command("—Å–µ–º—å—è"))
async def show_family(message: types.Message):
    family_id = await get_user_family_id(message.from_user.id)
    if not family_id:
        await message.answer("üòï –í—ã –ø–æ–∫–∞ –Ω–µ –≤ —Å–µ–º—å–µ. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å.")
        return
    members = await get_family_members(family_id)
    await message.answer("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–∞—à–∞ —Å–µ–º—å—è:\n" + "\n".join(f"‚Ä¢ {name}" for name in members))
